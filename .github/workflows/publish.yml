name: Publish to PyPI

on:
  push:
    branches:
      - 'release/v*'  # Run when a release branch is pushed

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.5
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Extract version from branch
      run: |
        # Extract version from branch name (remove 'release/v' prefix)
        BRANCH_VERSION=${GITHUB_REF#refs/heads/release/v}
        
        # Extract version from pyproject.toml
        PROJECT_VERSION=$(poetry version --short)
        
        echo "Branch version: $BRANCH_VERSION"
        echo "Project version: $PROJECT_VERSION"
        
        # Check if versions match
        if [ "$PROJECT_VERSION" != "$BRANCH_VERSION" ]; then
          echo "Error: Branch version ($BRANCH_VERSION) does not match version in pyproject.toml ($PROJECT_VERSION)"
          exit 1
        fi
        
        # Set version for later steps
        echo "VERSION=$PROJECT_VERSION" >> $GITHUB_ENV
    
    - name: Lint and test
      run: |
        poetry run make lint
        poetry run make test
    
    - name: Build package
      run: |
        poetry build
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
    
    - name: Publish to PyPI
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry config pypi-token.pypi $PYPI_TOKEN
        poetry publish